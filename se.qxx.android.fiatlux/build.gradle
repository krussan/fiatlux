buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
    }
}

plugins {
    id 'com.android.application'
    id 'com.github.triplet.play'
    id 'idea'
}

def appVersionName = rootProject.findProperty('version') ?: '1.0'
def appVersionParts = appVersionName.split("\\.")
def appVersionCode = Integer.valueOf(appVersionParts[0]) * 10000 + Integer.valueOf(appVersionParts[1]) * 100 + Integer.valueOf(appVersionParts[2])
def appJsonFile = project.findProperty('apiJsonFile') ?: '../ci/api.json'
def appCompatVersion = "1.2.0"
def designSupportVersion = "1.0.0"

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android {
                if (namespace == null) {
                    namespace = 'se.qxx.android.fiatlux'
                }
            }
        }
    }
}

android {
    namespace = 'se.qxx.android.fiatlux'

    // buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "se.qxx.android.fiatlux"
        compileSdk 34
        minSdkVersion 23
        targetSdkVersion 34
        versionCode appVersionCode
        versionName appVersionName
        setProperty("archivesBaseName", "fiatlux-$versionName")
    }

    signingConfigs {
        release {
			if (System.getenv('RELEASE_STORE_FILE') != null)
	            storeFile file(System.getenv('RELEASE_STORE_FILE'))

			if (System.getenv("RELEASE_STORE_PASSWORD") != null)
	            storePassword System.getenv("RELEASE_STORE_PASSWORD")
		
			if (System.getenv("RELEASE_KEY_ALIAS") != null)
	            keyAlias System.getenv("RELEASE_KEY_ALIAS")
		
			if (System.getenv("RELEASE_KEY_PASSWORD") != null)
	            keyPassword System.getenv("RELEASE_KEY_PASSWORD")

			if (project.hasProperty("RELEASE_STORE_FILE"))
	            storeFile file(RELEASE_STORE_FILE)

			if (project.hasProperty("RELEASE_STORE_PASSWORD"))
	            storePassword RELEASE_STORE_PASSWORD 	

			if (project.hasProperty("RELEASE_KEY_ALIAS"))
	            keyAlias RELEASE_KEY_ALIAS	
		
			if (project.hasProperty("RELEASE_KEY_PASSWORD"))
	            keyPassword RELEASE_KEY_PASSWORD
			
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.txt'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_17
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/native-image/**'
    }
}

def publish = project.tasks.create("publishAll");
if (project.hasProperty("RELEASE_DEPLOY_PATH")) {
    def deployPath = project.properties["RELEASE_DEPLOY_PATH"];
    def folder = new File(deployPath)

    if (folder.exists()) {
        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def task = project.tasks.create("publish" + variant.name.capitalize() + "Apk", Copy)

                task.from(output.outputFile)
                task.into(folder)

                task.dependsOn variant.assemble
                publish.dependsOn task
            }
        }
    }
}

play {
    track = "internal"
    serviceAccountCredentials = file(appJsonFile)
}

dependencies {
    testImplementation 'junit:junit:4.13.1'
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.appcompat:appcompat-resources:$appCompatVersion"

    implementation project(':se.qxx.fiatlux.domain')
    implementation 'se.qxx.android.tools:android-tools:1.0.2'
    implementation "io.grpc:grpc-okhttp:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

}


