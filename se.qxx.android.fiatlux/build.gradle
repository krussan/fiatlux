buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
    }
}

plugins {
    id 'com.android.application'
    id 'com.github.triplet.play'
    id 'idea'
}

def appVersionName = rootProject.findProperty('version') ?: '1.0'
def appVersionCode = Integer.valueOf(System.env.TRAVIS_BUILD_NUMBER ?: project.findProperty('versionCode') ?: 1)
def appJsonFile = project.findProperty('apiJsonFile') ?: '../ci/api.json'
def appcompat_version = "1.1.0"

android {
    compileSdkVersion 28
    // buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "se.qxx.android.fiatlux"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode appVersionCode
        versionName appVersionName
        setProperty("archivesBaseName", "fiatlux-$versionName")
    }

    signingConfigs {
        release {
			if (System.env['RELEASE_STORE_FILE'] != null)
	            storeFile file(System.env['RELEASE_STORE_FILE'])

			if (System.env["RELEASE_STORE_PASSWORD"] != null)
	            storePassword System.env["RELEASE_STORE_PASSWORD"]
		
			if (System.env["RELEASE_KEY_ALIAS"] != null)
	            keyAlias System.env["RELEASE_KEY_ALIAS"]
		
			if (System.env["RELEASE_KEY_PASSWORD"] != null)
	            keyPassword System.env["RELEASE_KEY_PASSWORD"]
			
			if (project.hasProperty("RELEASE_STORE_FILE"))
	            storeFile file(RELEASE_STORE_FILE)

			if (project.hasProperty("RELEASE_STORE_PASSWORD"))
	            storePassword RELEASE_STORE_PASSWORD 	

			if (project.hasProperty("RELEASE_KEY_ALIAS"))
	            keyAlias RELEASE_KEY_ALIAS	
		
			if (project.hasProperty("RELEASE_KEY_PASSWORD"))
	            keyPassword RELEASE_KEY_PASSWORD
			
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.txt'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/native-image/**'
    }
}

def publish = project.tasks.create("publishAll");
if (project.hasProperty("RELEASE_DEPLOY_PATH")) {
    def deployPath = project.properties["RELEASE_DEPLOY_PATH"];
    def folder = new File(deployPath)

    if (folder.exists()) {
        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def task = project.tasks.create("publish" + variant.name.capitalize() + "Apk", Copy)

                task.from(output.outputFile)
                task.into(folder)

                task.dependsOn variant.assemble
                publish.dependsOn task
            }
        }
    }
}

play {
    track = "internal"
    serviceAccountCredentials = file(appJsonFile)
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.appcompat:appcompat-resources:$appcompat_version"

    implementation project(':se.qxx.fiatlux.domain')
    implementation 'se.qxx.android.tools:android-tools:1.0.2'
    implementation "io.grpc:grpc-okhttp:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

}


