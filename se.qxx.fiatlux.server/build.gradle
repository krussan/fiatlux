apply plugin: 'java'
apply plugin: 'idea'

group = 'se.qxx.fiatlux'
version = rootProject.findProperty('version') ?: '1.0'

description = 'fiatlux-server'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {       
    maven { url "https://github.com/krussan/maven-repo/raw/master/" }
    maven { url "https://repo.maven.apache.org/maven2" }
}

tasks.register('archiveZip', Zip) {
    dependsOn 'build'
    archiveBaseName = 'fiatlux-server'
    into('.') {
        from('.') {
            include '**/*'
            exclude '.gradle/**'
            exclude 'build/classes/**'
            exclude 'build/distributions/**'
            exclude 'build/resouces/**'
            exclude 'build/tmp/**'
            exclude 'build/generated/**'
        }
    }
}

build {
	doLast {
      def libsDir = base.libsDirectory.get()
      def runFile = libsDir.file("run.sh").asFile
      def jarFile = fatJar.archiveFileName.get()
      println(runFile)

      runFile.withWriter('UTF-8') { writer ->
			writer.writeLine('#!/bin/sh')
			writer.writeLine('if [ -n "$LD_LIBRARY_PATH" ]')
			writer.writeLine('then')
			writer.writeLine('   LD_LIBRARY_PATH=$PWD:${LD_LIBRARY_PATH}')
			writer.writeLine('else')
			writer.writeLine('   LD_LIBRARY_PATH=$PWD')
			writer.writeLine('fi')
			writer.writeLine('export LD_LIBRARY_PATH=$LD_LIBRARY_PATH')
			writer.writeLine("java -jar $jarFile" + ' ${1+"$@"} &')
		}

		copy {
			from "$projectDir"
			into "$libsDir"
			include 'stop.sh'
			include 'cron-example'
		}

		archiveZip
	}
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
  archiveBaseName = 'fiatlux-server'

  manifest {
    attributes(
      'Main-Class': 'se.qxx.fiatlux.server.FiatLuxServer',
    )
  }
}

tasks.register('fatJar', Jar) {
    manifest.from jar.manifest
    archiveClassifier = 'all'
    archiveBaseName = 'fiatlux-server'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

artifacts {
    archives fatJar
}

dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.25.3'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'net.java.dev.jna:jna:4.2.2'
    implementation 'com.luckycatlabs:SunriseSunsetCalculator:1.2'
    implementation 'it.sauronsoftware.cron4j:cron4j:2.2.5'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'net.sourceforge.argparse4j:argparse4j:0.8.1'
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation project(':se.qxx.fiatlux.domain')
    testImplementation 'junit:junit:4.13.1'
}


java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}